
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Client body settings
    client_body_temp_path /tmp/nginx/client-body;
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # API for operations data
        location /api/operations {
            default_type application/json;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # For GET requests
            if ($request_method = GET) {
                root /app;
                try_files /data/operations.json =404;
            }
            
            # For POST requests - write the request body to file
            if ($request_method = POST) {
                # Create a simple script to handle the file writing
                proxy_pass http://127.0.0.1:8000/save_operations;
                proxy_set_header Content-Type $http_content_type;
                proxy_set_header X-File-Path "/app/data/operations.json";
            }
        }
        
        # API for employees data
        location /api/employees {
            default_type application/json;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # For GET requests
            if ($request_method = GET) {
                root /app;
                try_files /data/employees.json =404;
            }
            
            # For POST requests - write the request body to file
            if ($request_method = POST) {
                proxy_pass http://127.0.0.1:8000/save_file;
                proxy_set_header Content-Type $http_content_type;
                proxy_set_header X-File-Path "/app/data/employees.json";
            }
        }
        
        # API for machines data
        location /api/machines {
            default_type application/json;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # For GET requests
            if ($request_method = GET) {
                root /app;
                try_files /data/machines.json =404;
            }
            
            # For POST requests - write the request body to file
            if ($request_method = POST) {
                proxy_pass http://127.0.0.1:8000/save_file;
                proxy_set_header Content-Type $http_content_type;
                proxy_set_header X-File-Path "/app/data/machines.json";
            }
        }
        
        # API for projects data
        location /api/projects {
            default_type application/json;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # For GET requests
            if ($request_method = GET) {
                root /app;
                try_files /data/projects.json =404;
            }
            
            # For POST requests - write the request body to file
            if ($request_method = POST) {
                proxy_pass http://127.0.0.1:8000/save_file;
                proxy_set_header Content-Type $http_content_type;
                proxy_set_header X-File-Path "/app/data/projects.json";
            }
        }

        # Handle React routing - main location block for the application
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Static files caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires max;
            log_not_found off;
        }
    }
}
