
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Kompresja gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    # API dla przechowywania danych
    location /api/operations {
        alias /app/data/operations.json;
        default_type application/json;
        
        # GET - pobieranie operacji
        if ($request_method = GET) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            try_files $uri /app/data/operations.json;
        }
        
        # POST - zapisywanie operacji
        if ($request_method = POST) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            
            client_body_temp_path /app/data/tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 10M;
            
            proxy_pass_request_headers on;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header X-Original-URI $request_uri;
            
            set $path "/app/data/operations.json";
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open(ngx.var.path, "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }
    
    location /api/employees {
        alias /app/data/employees.json;
        default_type application/json;
        
        # GET - pobieranie pracowników
        if ($request_method = GET) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            try_files $uri /app/data/employees.json;
        }
        
        # POST - zapisywanie pracowników
        if ($request_method = POST) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            
            client_body_temp_path /app/data/tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 1M;
            
            proxy_pass_request_headers on;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header X-Original-URI $request_uri;
            
            set $path "/app/data/employees.json";
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open(ngx.var.path, "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }
    
    location /api/machines {
        alias /app/data/machines.json;
        default_type application/json;
        
        # GET - pobieranie maszyn
        if ($request_method = GET) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            try_files $uri /app/data/machines.json;
        }
        
        # POST - zapisywanie maszyn
        if ($request_method = POST) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            
            client_body_temp_path /app/data/tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 1M;
            
            proxy_pass_request_headers on;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header X-Original-URI $request_uri;
            
            set $path "/app/data/machines.json";
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open(ngx.var.path, "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }
    
    location /api/projects {
        alias /app/data/projects.json;
        default_type application/json;
        
        # GET - pobieranie projektów
        if ($request_method = GET) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            try_files $uri /app/data/projects.json;
        }
        
        # POST - zapisywanie projektów
        if ($request_method = POST) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            
            client_body_temp_path /app/data/tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 5M;
            
            proxy_pass_request_headers on;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header X-Original-URI $request_uri;
            
            set $path "/app/data/projects.json";
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open(ngx.var.path, "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }

    # Obsługa React Router
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Pliki statyczne
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires max;
        log_not_found off;
    }
}
