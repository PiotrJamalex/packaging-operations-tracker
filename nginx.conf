
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # API for operations data
    location /api/operations {
        default_type application/json;
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        if ($request_method = GET) {
            try_files /app/data/operations.json =404;
        }
        
        if ($request_method = POST) {
            client_body_temp_path /tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 10M;
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open("/app/data/operations.json", "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }
    
    # API for employees data
    location /api/employees {
        default_type application/json;
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        if ($request_method = GET) {
            try_files /app/data/employees.json =404;
        }
        
        if ($request_method = POST) {
            client_body_temp_path /tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 10M;
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open("/app/data/employees.json", "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }
    
    # API for machines data
    location /api/machines {
        default_type application/json;
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        if ($request_method = GET) {
            try_files /app/data/machines.json =404;
        }
        
        if ($request_method = POST) {
            client_body_temp_path /tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 10M;
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open("/app/data/machines.json", "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }
    
    # API for projects data
    location /api/projects {
        default_type application/json;
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        if ($request_method = GET) {
            try_files /app/data/projects.json =404;
        }
        
        if ($request_method = POST) {
            client_body_temp_path /tmp;
            client_body_in_file_only on;
            client_body_buffer_size 128K;
            client_max_body_size 10M;
            
            content_by_lua_block {
                local file = io.open(ngx.var.request_body_file, "r")
                if not file then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open request body file"}')
                    return
                end
                
                local content = file:read("*all")
                file:close()
                
                local outfile = io.open("/app/data/projects.json", "w")
                if not outfile then
                    ngx.status = 500
                    ngx.say('{"error": "Could not open output file"}')
                    return
                end
                
                outfile:write(content)
                outfile:close()
                
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }
    }

    # Handle React routing
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires max;
        log_not_found off;
    }
}
